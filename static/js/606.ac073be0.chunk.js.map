{"version":3,"file":"static/js/606.ac073be0.chunk.js","mappings":"uQAgJA,UAhIoB,WAClB,IAAMA,GAAkBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC9BC,GAAWF,EAAAA,EAAAA,IAAYG,EAAAA,IACvBC,GAAYJ,EAAAA,EAAAA,IAAYK,EAAAA,IACxBC,GAAQN,EAAAA,EAAAA,IAAYO,EAAAA,IAEpBC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACHX,GAILS,GAASG,EAAAA,EAAAA,MACX,GAAG,CAACZ,EAAiBS,IAErB,IAAMI,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,KAAM,GACNC,OAAQ,IAEVC,iBAAkBC,EAAAA,GAAW,CAC3BH,KAAMG,EAAAA,KAAaC,IAAI,GAAGC,SAAS,6BACnCJ,OAAQE,EAAAA,KAAaC,IAAI,GAAGC,SAAS,+BAEvCC,SAAU,SAAAC,GACRd,GACEe,EAAAA,EAAAA,IAAmB,CACjBR,KAAMO,EAAOP,KACbC,OAAQM,EAAON,UAGnBJ,EAAOY,WACT,IAGIC,EAAcC,MAAMC,QAAQzB,IAAaA,EAAS0B,OAAS,EAEjE,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAKC,QAAQ,QAAQC,aAAc,EAAGC,UAAW,GAAGN,SAAC,iBAGzEC,EAAAA,EAAAA,KAACM,EAAAA,EAAG,CACFC,GAAI,CACFJ,QAAS,OACTE,UAAW,GACXG,cAAe,SACfC,WAAY,SACZC,eAAgB,SAChBC,MAAO,OACPC,SAAU,IACVC,OAAQ,UACRd,UAEFC,EAAAA,EAAAA,KAACM,EAAAA,EAAG,CAACQ,UAAU,OAAOxB,SAAUT,EAAOkC,aAAahB,UAClDD,EAAAA,EAAAA,MAACkB,EAAAA,GAAI,CACHC,WAAS,EACTC,QAAS,EACTX,GAAI,CAAEE,WAAY,SAAUC,eAAgB,UAAWX,SAAA,EAEvDC,EAAAA,EAAAA,KAACgB,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAGtB,UACxBD,EAAAA,EAAAA,MAAA,SAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACsB,EAAAA,EAAS,CACRC,KAAK,OACLvC,KAAK,OACLwC,MAAM,OACNC,WAAS,EACTvB,QAAQ,WACRwB,MAAO7C,EAAOU,OAAOoC,MACrBC,SAAU/C,EAAOgD,aACjBC,OAAQjD,EAAOkD,aAEhBlD,EAAOmD,OAAOL,OAAS9C,EAAOoD,QAAQN,OACrC3B,EAAAA,EAAAA,KAAA,OAAKkC,UAAU,QAAOnC,SAAElB,EAAOmD,OAAOL,QACpC,WAGR3B,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAACgB,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAGtB,UACxBD,EAAAA,EAAAA,MAAA,SAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACsB,EAAAA,EAAS,CACRC,KAAK,SACLvC,KAAK,SACLwC,MAAM,SACNC,WAAS,EACTvB,QAAQ,WACRwB,MAAO7C,EAAOU,OAAO4C,SACrBP,SAAU/C,EAAOgD,aACjBC,OAAQjD,EAAOkD,aAEhBlD,EAAOmD,OAAOG,UAAYtD,EAAOoD,QAAQE,UACxCnC,EAAAA,EAAAA,KAAA,OAAKkC,UAAU,QAAOnC,SAAElB,EAAOmD,OAAOG,WACpC,WAGRnC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAACoC,EAAAA,EAAM,CACLlC,QAAQ,YACRmC,MAAM,UACNC,KAAK,QACL/B,GAAI,CAAEF,UAAW,EAAGD,aAAc,GAClCmB,KAAK,SAAQxB,SACd,eAON1B,IAAa2B,EAAAA,EAAAA,KAAA,KAAAD,SAAG,YAChBxB,IAASyB,EAAAA,EAAAA,KAAA,KAAAD,SAAG,wCAEbC,EAAAA,EAAAA,KAAA,MAAAD,SACGL,GACCvB,EAASoE,KAAI,SAAAC,GACX,OACE1C,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CAAI,SAAOyC,EAAQxD,SACnBc,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CAAI,WAASyC,EAAQvD,YAFduD,EAAQC,GAKrB,QAIV,C","sources":["pages/ContactPage.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  createContactThunk,\n  requestContactsThunk,\n} from 'redux/contactsActions';\nimport {\n  selectAuthentificated,\n  selectContactsError,\n  selectContactsIsLoading,\n  selectUserContacts,\n} from 'redux/selectors';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { Box, Button, Grid, TextField, Typography } from '@mui/material';\n\nconst ContactPage = () => {\n  const authentificated = useSelector(selectAuthentificated);\n  const contacts = useSelector(selectUserContacts);\n  const isLoading = useSelector(selectContactsIsLoading);\n  const error = useSelector(selectContactsError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!authentificated) {\n      return;\n    }\n\n    dispatch(requestContactsThunk());\n  }, [authentificated, dispatch]);\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    validationSchema: Yup.object({\n      name: Yup.string().min(2).required('Please fill in this field'),\n      number: Yup.string().min(7).required('Please fill in this field'),\n    }),\n    onSubmit: values => {\n      dispatch(\n        createContactThunk({\n          name: values.name,\n          number: values.number,\n        })\n      );\n      formik.resetForm();\n    },\n  });\n\n  const allContacts = Array.isArray(contacts) && contacts.length > 0;\n\n  return (\n    <div>\n      <Typography variant=\"h6\" display=\"block\" marginBottom={4} marginTop={10}>\n        ADD CONTACT\n      </Typography>\n      <Box\n        sx={{\n          display: 'flex',\n          marginTop: 32,\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          width: '100%',\n          maxWidth: 600,\n          margin: '0 auto',\n        }}\n      >\n        <Box component=\"form\" onSubmit={formik.handleSubmit}>\n          <Grid\n            container\n            spacing={2}\n            sx={{ alignItems: 'center', justifyContent: 'center' }}\n          >\n            <Grid item xs={12} md={10}>\n              <label>\n                <TextField\n                  type=\"name\"\n                  name=\"name\"\n                  label=\"Name\"\n                  fullWidth\n                  variant=\"outlined\"\n                  value={formik.values.email}\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                />\n                {formik.errors.email && formik.touched.email ? (\n                  <div className=\"error\">{formik.errors.email}</div>\n                ) : null}\n              </label>\n            </Grid>\n            <br />\n            <Grid item xs={12} md={10}>\n              <label>\n                <TextField\n                  type=\"number\"\n                  name=\"number\"\n                  label=\"Number\"\n                  fullWidth\n                  variant=\"outlined\"\n                  value={formik.values.password}\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                />\n                {formik.errors.password && formik.touched.password ? (\n                  <div className=\"error\">{formik.errors.password}</div>\n                ) : null}\n              </label>\n            </Grid>\n            <br />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"large\"\n              sx={{ marginTop: 4, marginBottom: 4 }}\n              type=\"submit\"\n            >\n              ADD\n            </Button>\n          </Grid>\n        </Box>\n      </Box>\n\n      {isLoading && <p>Loading</p>}\n      {error && <p> There is something wrong there...</p>}\n\n      <ul>\n        {allContacts &&\n          contacts.map(contact => {\n            return (\n              <li key={contact.id}>\n                <h3>Name: {contact.name}</h3>\n                <h3>Number: {contact.number}</h3>\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactPage;\n"],"names":["authentificated","useSelector","selectAuthentificated","contacts","selectUserContacts","isLoading","selectContactsIsLoading","error","selectContactsError","dispatch","useDispatch","useEffect","requestContactsThunk","formik","useFormik","initialValues","name","number","validationSchema","Yup","min","required","onSubmit","values","createContactThunk","resetForm","allContacts","Array","isArray","length","_jsxs","children","_jsx","Typography","variant","display","marginBottom","marginTop","Box","sx","flexDirection","alignItems","justifyContent","width","maxWidth","margin","component","handleSubmit","Grid","container","spacing","item","xs","md","TextField","type","label","fullWidth","value","email","onChange","handleChange","onBlur","handleBlur","errors","touched","className","password","Button","color","size","map","contact","id"],"sourceRoot":""}